// generated by Claude 3.5 sonnet

import { env } from 'cloudflare:test'

import { createStandardIncomeGrade, createStandardIncomeTable } from '@/domains/standard_income/logic'
import type { User } from '@/domains/user'
import { createUser } from '@/domains/user/logic'

import { saveUser } from '../authorize/dao'
import {
  getStandardIncomeTable,
  insertStandardIncomeTable,
  listStandardIncomeTables,
  updateStandardIncomeTableGrades,
  updateStandardIncomeTableName,
} from './dao'

describe('基本的なCRUD', () => {
  const dummyUser: User = createUser({
    name: 'testuser',
    email: 'test@example.com',
    auth0UserId: 'auth0_test_user',
  })

  const dummyEntity = createStandardIncomeTable({
    userId: dummyUser.id,
    name: 'test table',
    grades: [
      {
        threshold: 100000,
        standardIncome: 100000,
      },
      {
        threshold: 200000,
        standardIncome: 200000,
      },
      {
        threshold: 300000,
        standardIncome: 300000,
      },
    ],
  })._unsafeUnwrap()

  beforeAll(async () => {
    await saveUser(env.D1)(dummyUser)
    await insertStandardIncomeTable(env.D1)(dummyEntity)
  })

  test('テーブルは1件しか存在しないこと', async () => {
    const stmt = 'SELECT COUNT(*) count FROM standard_income_tables'
    const result = await env.D1.prepare(stmt).first<{ count: number }>()
    expect(result?.count).toBe(1)
  })

  test('階級レコードは3件存在すること', async () => {
    const stmt = 'SELECT COUNT(*) count FROM standard_income_grades'
    const result = await env.D1.prepare(stmt).first<{ count: number }>()
    expect(result?.count).toBe(3)
  })

  describe('id直打ちで取得', () => {
    test('同じ項目を取得できること', async () => {
      const actual = await getStandardIncomeTable(env.D1)({
        userId: dummyUser.id,
        id: dummyEntity.id,
      })

      expect(actual).toStrictEqual(dummyEntity)
    })

    test('他人の項目は取得できないこと', async () => {
      const actual = await getStandardIncomeTable(env.D1)({
        userId: 'dummy_user_id',
        id: dummyEntity.id,
      })

      expect(actual).toBeUndefined()
    })
  })

  describe('一覧の取得', () => {
    test('項目を取得できること', async () => {
      const actual = await listStandardIncomeTables(env.D1)({
        //
        userId: dummyUser.id,
      })

      expect(actual).toStrictEqual([{
        id: dummyEntity.id,
        userId: dummyEntity.userId,
        name: dummyEntity.name,
      }])
    })

    test('他人の項目は取得できないこと', async () => {
      const actual = await listStandardIncomeTables(env.D1)({ userId: 'dummy_user_id' })

      expect(actual).toStrictEqual([])
    })
  })

  describe('項目の更新', () => {
    test('名前が更新できること', async () => {
      const actual = await updateStandardIncomeTableName(env.D1)({
        userId: dummyUser.id,
        id: dummyEntity.id,
        name: 'updated name',
      })

      expect(actual).toStrictEqual({
        id: dummyEntity.id,
        userId: dummyEntity.userId,
        name: 'updated name',
      })
    })

    test('階級が更新できること', async () => {
      const actual = await updateStandardIncomeTableGrades(env.D1)({
        userId: dummyUser.id,
        id: dummyEntity.id,
        grades: [
          {
            threshold: 100000,
            standardIncome: 100000,
          },
          {
            threshold: 200000,
            standardIncome: 200000,
          },
        ].map(grade => createStandardIncomeGrade(grade)._unsafeUnwrap()),
      })

      expect(actual).toBeDefined()

      const updated = await getStandardIncomeTable(env.D1)({
        userId: dummyUser.id,
        id: dummyEntity.id,
      })

      expect(updated?.grades).toStrictEqual([
        {
          threshold: 100000,
          standardIncome: 100000,
        },
        {
          threshold: 200000,
          standardIncome: 200000,
        },
      ])
    })
  })
})
